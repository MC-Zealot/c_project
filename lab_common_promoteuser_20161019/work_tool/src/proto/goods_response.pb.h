// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goods_response.proto

#ifndef PROTOBUF_goods_5fresponse_2eproto__INCLUDED
#define PROTOBUF_goods_5fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace goods_interface {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_goods_5fresponse_2eproto();
void protobuf_AssignDesc_goods_5fresponse_2eproto();
void protobuf_ShutdownFile_goods_5fresponse_2eproto();

class AdWordPair;
class Category;
class FeedInfo;
class KeyValue;
class IdxSrv2AdEngMsg;

// ===================================================================

class AdWordPair : public ::google::protobuf::Message {
 public:
  AdWordPair();
  virtual ~AdWordPair();
  
  AdWordPair(const AdWordPair& from);
  
  inline AdWordPair& operator=(const AdWordPair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdWordPair& default_instance();
  
  void Swap(AdWordPair* other);
  
  // implements Message ----------------------------------------------
  
  AdWordPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdWordPair& from);
  void MergeFrom(const AdWordPair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string keywords = 1;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 1;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  
  // optional uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);
  
  // optional uint32 postigid = 3;
  inline bool has_postigid() const;
  inline void clear_postigid();
  static const int kPostigidFieldNumber = 3;
  inline ::google::protobuf::uint32 postigid() const;
  inline void set_postigid(::google::protobuf::uint32 value);
  
  // optional uint32 src_type = 4;
  inline bool has_src_type() const;
  inline void clear_src_type();
  static const int kSrcTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 src_type() const;
  inline void set_src_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:goods_interface.AdWordPair)
 private:
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_postigid();
  inline void clear_has_postigid();
  inline void set_has_src_type();
  inline void clear_has_src_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* keywords_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::uint32 postigid_;
  ::google::protobuf::uint32 src_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_goods_5fresponse_2eproto();
  friend void protobuf_AssignDesc_goods_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_goods_5fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static AdWordPair* default_instance_;
};
// -------------------------------------------------------------------

class Category : public ::google::protobuf::Message {
 public:
  Category();
  virtual ~Category();
  
  Category(const Category& from);
  
  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Category& default_instance();
  
  void Swap(Category* other);
  
  // implements Message ----------------------------------------------
  
  Category* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 cate_code = 1;
  inline bool has_cate_code() const;
  inline void clear_cate_code();
  static const int kCateCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 cate_code() const;
  inline void set_cate_code(::google::protobuf::uint32 value);
  
  // optional uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);
  
  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 src_type = 4;
  inline bool has_src_type() const;
  inline void clear_src_type();
  static const int kSrcTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 src_type() const;
  inline void set_src_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:goods_interface.Category)
 private:
  inline void set_has_cate_code();
  inline void clear_has_cate_code();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_src_type();
  inline void clear_has_src_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 cate_code_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 src_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_goods_5fresponse_2eproto();
  friend void protobuf_AssignDesc_goods_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_goods_5fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static Category* default_instance_;
};
// -------------------------------------------------------------------

class FeedInfo : public ::google::protobuf::Message {
 public:
  FeedInfo();
  virtual ~FeedInfo();
  
  FeedInfo(const FeedInfo& from);
  
  inline FeedInfo& operator=(const FeedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedInfo& default_instance();
  
  void Swap(FeedInfo* other);
  
  // implements Message ----------------------------------------------
  
  FeedInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedInfo& from);
  void MergeFrom(const FeedInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 custid = 1;
  inline bool has_custid() const;
  inline void clear_custid();
  static const int kCustidFieldNumber = 1;
  inline ::google::protobuf::uint64 custid() const;
  inline void set_custid(::google::protobuf::uint64 value);
  
  // required uint64 adid = 2;
  inline bool has_adid() const;
  inline void clear_adid();
  static const int kAdidFieldNumber = 2;
  inline ::google::protobuf::uint64 adid() const;
  inline void set_adid(::google::protobuf::uint64 value);
  
  // optional uint64 feedid = 3;
  inline bool has_feedid() const;
  inline void clear_feedid();
  static const int kFeedidFieldNumber = 3;
  inline ::google::protobuf::uint64 feedid() const;
  inline void set_feedid(::google::protobuf::uint64 value);
  
  // optional uint64 ptime = 4;
  inline bool has_ptime() const;
  inline void clear_ptime();
  static const int kPtimeFieldNumber = 4;
  inline ::google::protobuf::uint64 ptime() const;
  inline void set_ptime(::google::protobuf::uint64 value);
  
  // optional uint32 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);
  
  // optional uint32 bidtype = 6;
  inline bool has_bidtype() const;
  inline void clear_bidtype();
  static const int kBidtypeFieldNumber = 6;
  inline ::google::protobuf::uint32 bidtype() const;
  inline void set_bidtype(::google::protobuf::uint32 value);
  
  // optional uint32 matchlevel = 7;
  inline bool has_matchlevel() const;
  inline void clear_matchlevel();
  static const int kMatchlevelFieldNumber = 7;
  inline ::google::protobuf::uint32 matchlevel() const;
  inline void set_matchlevel(::google::protobuf::uint32 value);
  
  // optional uint32 score = 8;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 8;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);
  
  // repeated .goods_interface.KeyValue key_val_list = 9;
  inline int key_val_list_size() const;
  inline void clear_key_val_list();
  static const int kKeyValListFieldNumber = 9;
  inline const ::goods_interface::KeyValue& key_val_list(int index) const;
  inline ::goods_interface::KeyValue* mutable_key_val_list(int index);
  inline ::goods_interface::KeyValue* add_key_val_list();
  inline const ::google::protobuf::RepeatedPtrField< ::goods_interface::KeyValue >&
      key_val_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::goods_interface::KeyValue >*
      mutable_key_val_list();
  
  // optional string creative = 10;
  inline bool has_creative() const;
  inline void clear_creative();
  static const int kCreativeFieldNumber = 10;
  inline const ::std::string& creative() const;
  inline void set_creative(const ::std::string& value);
  inline void set_creative(const char* value);
  inline void set_creative(const char* value, size_t size);
  inline ::std::string* mutable_creative();
  inline ::std::string* release_creative();
  
  // optional uint32 pricetype = 11;
  inline bool has_pricetype() const;
  inline void clear_pricetype();
  static const int kPricetypeFieldNumber = 11;
  inline ::google::protobuf::uint32 pricetype() const;
  inline void set_pricetype(::google::protobuf::uint32 value);
  
  // optional float royalty_price = 12;
  inline bool has_royalty_price() const;
  inline void clear_royalty_price();
  static const int kRoyaltyPriceFieldNumber = 12;
  inline float royalty_price() const;
  inline void set_royalty_price(float value);
  
  // repeated .goods_interface.AdWordPair keywordlist = 13;
  inline int keywordlist_size() const;
  inline void clear_keywordlist();
  static const int kKeywordlistFieldNumber = 13;
  inline const ::goods_interface::AdWordPair& keywordlist(int index) const;
  inline ::goods_interface::AdWordPair* mutable_keywordlist(int index);
  inline ::goods_interface::AdWordPair* add_keywordlist();
  inline const ::google::protobuf::RepeatedPtrField< ::goods_interface::AdWordPair >&
      keywordlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::goods_interface::AdWordPair >*
      mutable_keywordlist();
  
  // repeated .goods_interface.Category categorylist = 14;
  inline int categorylist_size() const;
  inline void clear_categorylist();
  static const int kCategorylistFieldNumber = 14;
  inline const ::goods_interface::Category& categorylist(int index) const;
  inline ::goods_interface::Category* mutable_categorylist(int index);
  inline ::goods_interface::Category* add_categorylist();
  inline const ::google::protobuf::RepeatedPtrField< ::goods_interface::Category >&
      categorylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::goods_interface::Category >*
      mutable_categorylist();
  
  // required string url_md5 = 15;
  inline bool has_url_md5() const;
  inline void clear_url_md5();
  static const int kUrlMd5FieldNumber = 15;
  inline const ::std::string& url_md5() const;
  inline void set_url_md5(const ::std::string& value);
  inline void set_url_md5(const char* value);
  inline void set_url_md5(const char* value, size_t size);
  inline ::std::string* mutable_url_md5();
  inline ::std::string* release_url_md5();
  
  // required string url = 16;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 16;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // required string ad_cate = 17;
  inline bool has_ad_cate() const;
  inline void clear_ad_cate();
  static const int kAdCateFieldNumber = 17;
  inline const ::std::string& ad_cate() const;
  inline void set_ad_cate(const ::std::string& value);
  inline void set_ad_cate(const char* value);
  inline void set_ad_cate(const char* value, size_t size);
  inline ::std::string* mutable_ad_cate();
  inline ::std::string* release_ad_cate();
  
  // required uint32 price_limited = 18;
  inline bool has_price_limited() const;
  inline void clear_price_limited();
  static const int kPriceLimitedFieldNumber = 18;
  inline ::google::protobuf::uint32 price_limited() const;
  inline void set_price_limited(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:goods_interface.FeedInfo)
 private:
  inline void set_has_custid();
  inline void clear_has_custid();
  inline void set_has_adid();
  inline void clear_has_adid();
  inline void set_has_feedid();
  inline void clear_has_feedid();
  inline void set_has_ptime();
  inline void clear_has_ptime();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_bidtype();
  inline void clear_has_bidtype();
  inline void set_has_matchlevel();
  inline void clear_has_matchlevel();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_creative();
  inline void clear_has_creative();
  inline void set_has_pricetype();
  inline void clear_has_pricetype();
  inline void set_has_royalty_price();
  inline void clear_has_royalty_price();
  inline void set_has_url_md5();
  inline void clear_has_url_md5();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_ad_cate();
  inline void clear_has_ad_cate();
  inline void set_has_price_limited();
  inline void clear_has_price_limited();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 custid_;
  ::google::protobuf::uint64 adid_;
  ::google::protobuf::uint64 feedid_;
  ::google::protobuf::uint64 ptime_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 bidtype_;
  ::google::protobuf::uint32 matchlevel_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::RepeatedPtrField< ::goods_interface::KeyValue > key_val_list_;
  ::std::string* creative_;
  ::google::protobuf::uint32 pricetype_;
  float royalty_price_;
  ::google::protobuf::RepeatedPtrField< ::goods_interface::AdWordPair > keywordlist_;
  ::google::protobuf::RepeatedPtrField< ::goods_interface::Category > categorylist_;
  ::std::string* url_md5_;
  ::std::string* url_;
  ::std::string* ad_cate_;
  ::google::protobuf::uint32 price_limited_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_goods_5fresponse_2eproto();
  friend void protobuf_AssignDesc_goods_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_goods_5fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static FeedInfo* default_instance_;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();
  
  KeyValue(const KeyValue& from);
  
  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();
  
  void Swap(KeyValue* other);
  
  // implements Message ----------------------------------------------
  
  KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required uint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:goods_interface.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::google::protobuf::uint64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_goods_5fresponse_2eproto();
  friend void protobuf_AssignDesc_goods_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_goods_5fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class IdxSrv2AdEngMsg : public ::google::protobuf::Message {
 public:
  IdxSrv2AdEngMsg();
  virtual ~IdxSrv2AdEngMsg();
  
  IdxSrv2AdEngMsg(const IdxSrv2AdEngMsg& from);
  
  inline IdxSrv2AdEngMsg& operator=(const IdxSrv2AdEngMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdxSrv2AdEngMsg& default_instance();
  
  void Swap(IdxSrv2AdEngMsg* other);
  
  // implements Message ----------------------------------------------
  
  IdxSrv2AdEngMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdxSrv2AdEngMsg& from);
  void MergeFrom(const IdxSrv2AdEngMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // repeated .goods_interface.FeedInfo feedlist = 2;
  inline int feedlist_size() const;
  inline void clear_feedlist();
  static const int kFeedlistFieldNumber = 2;
  inline const ::goods_interface::FeedInfo& feedlist(int index) const;
  inline ::goods_interface::FeedInfo* mutable_feedlist(int index);
  inline ::goods_interface::FeedInfo* add_feedlist();
  inline const ::google::protobuf::RepeatedPtrField< ::goods_interface::FeedInfo >&
      feedlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::goods_interface::FeedInfo >*
      mutable_feedlist();
  
  // optional string hostname = 3;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  
  // @@protoc_insertion_point(class_scope:goods_interface.IdxSrv2AdEngMsg)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::goods_interface::FeedInfo > feedlist_;
  ::std::string* hostname_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_goods_5fresponse_2eproto();
  friend void protobuf_AssignDesc_goods_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_goods_5fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static IdxSrv2AdEngMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// AdWordPair

// optional string keywords = 1;
inline bool AdWordPair::has_keywords() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdWordPair::set_has_keywords() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdWordPair::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdWordPair::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::kEmptyString) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& AdWordPair::keywords() const {
  return *keywords_;
}
inline void AdWordPair::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
}
inline void AdWordPair::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
}
inline void AdWordPair::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdWordPair::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    keywords_ = new ::std::string;
  }
  return keywords_;
}
inline ::std::string* AdWordPair::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 weight = 2;
inline bool AdWordPair::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdWordPair::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdWordPair::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdWordPair::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 AdWordPair::weight() const {
  return weight_;
}
inline void AdWordPair::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
}

// optional uint32 postigid = 3;
inline bool AdWordPair::has_postigid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdWordPair::set_has_postigid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdWordPair::clear_has_postigid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdWordPair::clear_postigid() {
  postigid_ = 0u;
  clear_has_postigid();
}
inline ::google::protobuf::uint32 AdWordPair::postigid() const {
  return postigid_;
}
inline void AdWordPair::set_postigid(::google::protobuf::uint32 value) {
  set_has_postigid();
  postigid_ = value;
}

// optional uint32 src_type = 4;
inline bool AdWordPair::has_src_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdWordPair::set_has_src_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdWordPair::clear_has_src_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdWordPair::clear_src_type() {
  src_type_ = 0u;
  clear_has_src_type();
}
inline ::google::protobuf::uint32 AdWordPair::src_type() const {
  return src_type_;
}
inline void AdWordPair::set_src_type(::google::protobuf::uint32 value) {
  set_has_src_type();
  src_type_ = value;
}

// -------------------------------------------------------------------

// Category

// optional uint32 cate_code = 1;
inline bool Category::has_cate_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Category::set_has_cate_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Category::clear_has_cate_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Category::clear_cate_code() {
  cate_code_ = 0u;
  clear_has_cate_code();
}
inline ::google::protobuf::uint32 Category::cate_code() const {
  return cate_code_;
}
inline void Category::set_cate_code(::google::protobuf::uint32 value) {
  set_has_cate_code();
  cate_code_ = value;
}

// optional uint32 weight = 2;
inline bool Category::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Category::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Category::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Category::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 Category::weight() const {
  return weight_;
}
inline void Category::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
}

// optional uint32 level = 3;
inline bool Category::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Category::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Category::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Category::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Category::level() const {
  return level_;
}
inline void Category::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 src_type = 4;
inline bool Category::has_src_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Category::set_has_src_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Category::clear_has_src_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Category::clear_src_type() {
  src_type_ = 0u;
  clear_has_src_type();
}
inline ::google::protobuf::uint32 Category::src_type() const {
  return src_type_;
}
inline void Category::set_src_type(::google::protobuf::uint32 value) {
  set_has_src_type();
  src_type_ = value;
}

// -------------------------------------------------------------------

// FeedInfo

// optional uint64 custid = 1;
inline bool FeedInfo::has_custid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedInfo::set_has_custid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedInfo::clear_has_custid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedInfo::clear_custid() {
  custid_ = GOOGLE_ULONGLONG(0);
  clear_has_custid();
}
inline ::google::protobuf::uint64 FeedInfo::custid() const {
  return custid_;
}
inline void FeedInfo::set_custid(::google::protobuf::uint64 value) {
  set_has_custid();
  custid_ = value;
}

// required uint64 adid = 2;
inline bool FeedInfo::has_adid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeedInfo::set_has_adid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeedInfo::clear_has_adid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeedInfo::clear_adid() {
  adid_ = GOOGLE_ULONGLONG(0);
  clear_has_adid();
}
inline ::google::protobuf::uint64 FeedInfo::adid() const {
  return adid_;
}
inline void FeedInfo::set_adid(::google::protobuf::uint64 value) {
  set_has_adid();
  adid_ = value;
}

// optional uint64 feedid = 3;
inline bool FeedInfo::has_feedid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeedInfo::set_has_feedid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeedInfo::clear_has_feedid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeedInfo::clear_feedid() {
  feedid_ = GOOGLE_ULONGLONG(0);
  clear_has_feedid();
}
inline ::google::protobuf::uint64 FeedInfo::feedid() const {
  return feedid_;
}
inline void FeedInfo::set_feedid(::google::protobuf::uint64 value) {
  set_has_feedid();
  feedid_ = value;
}

// optional uint64 ptime = 4;
inline bool FeedInfo::has_ptime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeedInfo::set_has_ptime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeedInfo::clear_has_ptime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeedInfo::clear_ptime() {
  ptime_ = GOOGLE_ULONGLONG(0);
  clear_has_ptime();
}
inline ::google::protobuf::uint64 FeedInfo::ptime() const {
  return ptime_;
}
inline void FeedInfo::set_ptime(::google::protobuf::uint64 value) {
  set_has_ptime();
  ptime_ = value;
}

// optional uint32 price = 5;
inline bool FeedInfo::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FeedInfo::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FeedInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FeedInfo::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 FeedInfo::price() const {
  return price_;
}
inline void FeedInfo::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// optional uint32 bidtype = 6;
inline bool FeedInfo::has_bidtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FeedInfo::set_has_bidtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FeedInfo::clear_has_bidtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FeedInfo::clear_bidtype() {
  bidtype_ = 0u;
  clear_has_bidtype();
}
inline ::google::protobuf::uint32 FeedInfo::bidtype() const {
  return bidtype_;
}
inline void FeedInfo::set_bidtype(::google::protobuf::uint32 value) {
  set_has_bidtype();
  bidtype_ = value;
}

// optional uint32 matchlevel = 7;
inline bool FeedInfo::has_matchlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FeedInfo::set_has_matchlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FeedInfo::clear_has_matchlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FeedInfo::clear_matchlevel() {
  matchlevel_ = 0u;
  clear_has_matchlevel();
}
inline ::google::protobuf::uint32 FeedInfo::matchlevel() const {
  return matchlevel_;
}
inline void FeedInfo::set_matchlevel(::google::protobuf::uint32 value) {
  set_has_matchlevel();
  matchlevel_ = value;
}

// optional uint32 score = 8;
inline bool FeedInfo::has_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FeedInfo::set_has_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FeedInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FeedInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 FeedInfo::score() const {
  return score_;
}
inline void FeedInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// repeated .goods_interface.KeyValue key_val_list = 9;
inline int FeedInfo::key_val_list_size() const {
  return key_val_list_.size();
}
inline void FeedInfo::clear_key_val_list() {
  key_val_list_.Clear();
}
inline const ::goods_interface::KeyValue& FeedInfo::key_val_list(int index) const {
  return key_val_list_.Get(index);
}
inline ::goods_interface::KeyValue* FeedInfo::mutable_key_val_list(int index) {
  return key_val_list_.Mutable(index);
}
inline ::goods_interface::KeyValue* FeedInfo::add_key_val_list() {
  return key_val_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goods_interface::KeyValue >&
FeedInfo::key_val_list() const {
  return key_val_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::goods_interface::KeyValue >*
FeedInfo::mutable_key_val_list() {
  return &key_val_list_;
}

// optional string creative = 10;
inline bool FeedInfo::has_creative() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FeedInfo::set_has_creative() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FeedInfo::clear_has_creative() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FeedInfo::clear_creative() {
  if (creative_ != &::google::protobuf::internal::kEmptyString) {
    creative_->clear();
  }
  clear_has_creative();
}
inline const ::std::string& FeedInfo::creative() const {
  return *creative_;
}
inline void FeedInfo::set_creative(const ::std::string& value) {
  set_has_creative();
  if (creative_ == &::google::protobuf::internal::kEmptyString) {
    creative_ = new ::std::string;
  }
  creative_->assign(value);
}
inline void FeedInfo::set_creative(const char* value) {
  set_has_creative();
  if (creative_ == &::google::protobuf::internal::kEmptyString) {
    creative_ = new ::std::string;
  }
  creative_->assign(value);
}
inline void FeedInfo::set_creative(const char* value, size_t size) {
  set_has_creative();
  if (creative_ == &::google::protobuf::internal::kEmptyString) {
    creative_ = new ::std::string;
  }
  creative_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeedInfo::mutable_creative() {
  set_has_creative();
  if (creative_ == &::google::protobuf::internal::kEmptyString) {
    creative_ = new ::std::string;
  }
  return creative_;
}
inline ::std::string* FeedInfo::release_creative() {
  clear_has_creative();
  if (creative_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creative_;
    creative_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 pricetype = 11;
inline bool FeedInfo::has_pricetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FeedInfo::set_has_pricetype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FeedInfo::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FeedInfo::clear_pricetype() {
  pricetype_ = 0u;
  clear_has_pricetype();
}
inline ::google::protobuf::uint32 FeedInfo::pricetype() const {
  return pricetype_;
}
inline void FeedInfo::set_pricetype(::google::protobuf::uint32 value) {
  set_has_pricetype();
  pricetype_ = value;
}

// optional float royalty_price = 12;
inline bool FeedInfo::has_royalty_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FeedInfo::set_has_royalty_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FeedInfo::clear_has_royalty_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FeedInfo::clear_royalty_price() {
  royalty_price_ = 0;
  clear_has_royalty_price();
}
inline float FeedInfo::royalty_price() const {
  return royalty_price_;
}
inline void FeedInfo::set_royalty_price(float value) {
  set_has_royalty_price();
  royalty_price_ = value;
}

// repeated .goods_interface.AdWordPair keywordlist = 13;
inline int FeedInfo::keywordlist_size() const {
  return keywordlist_.size();
}
inline void FeedInfo::clear_keywordlist() {
  keywordlist_.Clear();
}
inline const ::goods_interface::AdWordPair& FeedInfo::keywordlist(int index) const {
  return keywordlist_.Get(index);
}
inline ::goods_interface::AdWordPair* FeedInfo::mutable_keywordlist(int index) {
  return keywordlist_.Mutable(index);
}
inline ::goods_interface::AdWordPair* FeedInfo::add_keywordlist() {
  return keywordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goods_interface::AdWordPair >&
FeedInfo::keywordlist() const {
  return keywordlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::goods_interface::AdWordPair >*
FeedInfo::mutable_keywordlist() {
  return &keywordlist_;
}

// repeated .goods_interface.Category categorylist = 14;
inline int FeedInfo::categorylist_size() const {
  return categorylist_.size();
}
inline void FeedInfo::clear_categorylist() {
  categorylist_.Clear();
}
inline const ::goods_interface::Category& FeedInfo::categorylist(int index) const {
  return categorylist_.Get(index);
}
inline ::goods_interface::Category* FeedInfo::mutable_categorylist(int index) {
  return categorylist_.Mutable(index);
}
inline ::goods_interface::Category* FeedInfo::add_categorylist() {
  return categorylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goods_interface::Category >&
FeedInfo::categorylist() const {
  return categorylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::goods_interface::Category >*
FeedInfo::mutable_categorylist() {
  return &categorylist_;
}

// required string url_md5 = 15;
inline bool FeedInfo::has_url_md5() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FeedInfo::set_has_url_md5() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FeedInfo::clear_has_url_md5() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FeedInfo::clear_url_md5() {
  if (url_md5_ != &::google::protobuf::internal::kEmptyString) {
    url_md5_->clear();
  }
  clear_has_url_md5();
}
inline const ::std::string& FeedInfo::url_md5() const {
  return *url_md5_;
}
inline void FeedInfo::set_url_md5(const ::std::string& value) {
  set_has_url_md5();
  if (url_md5_ == &::google::protobuf::internal::kEmptyString) {
    url_md5_ = new ::std::string;
  }
  url_md5_->assign(value);
}
inline void FeedInfo::set_url_md5(const char* value) {
  set_has_url_md5();
  if (url_md5_ == &::google::protobuf::internal::kEmptyString) {
    url_md5_ = new ::std::string;
  }
  url_md5_->assign(value);
}
inline void FeedInfo::set_url_md5(const char* value, size_t size) {
  set_has_url_md5();
  if (url_md5_ == &::google::protobuf::internal::kEmptyString) {
    url_md5_ = new ::std::string;
  }
  url_md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeedInfo::mutable_url_md5() {
  set_has_url_md5();
  if (url_md5_ == &::google::protobuf::internal::kEmptyString) {
    url_md5_ = new ::std::string;
  }
  return url_md5_;
}
inline ::std::string* FeedInfo::release_url_md5() {
  clear_has_url_md5();
  if (url_md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_md5_;
    url_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string url = 16;
inline bool FeedInfo::has_url() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FeedInfo::set_has_url() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FeedInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FeedInfo::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& FeedInfo::url() const {
  return *url_;
}
inline void FeedInfo::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void FeedInfo::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void FeedInfo::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeedInfo::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* FeedInfo::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string ad_cate = 17;
inline bool FeedInfo::has_ad_cate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FeedInfo::set_has_ad_cate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FeedInfo::clear_has_ad_cate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FeedInfo::clear_ad_cate() {
  if (ad_cate_ != &::google::protobuf::internal::kEmptyString) {
    ad_cate_->clear();
  }
  clear_has_ad_cate();
}
inline const ::std::string& FeedInfo::ad_cate() const {
  return *ad_cate_;
}
inline void FeedInfo::set_ad_cate(const ::std::string& value) {
  set_has_ad_cate();
  if (ad_cate_ == &::google::protobuf::internal::kEmptyString) {
    ad_cate_ = new ::std::string;
  }
  ad_cate_->assign(value);
}
inline void FeedInfo::set_ad_cate(const char* value) {
  set_has_ad_cate();
  if (ad_cate_ == &::google::protobuf::internal::kEmptyString) {
    ad_cate_ = new ::std::string;
  }
  ad_cate_->assign(value);
}
inline void FeedInfo::set_ad_cate(const char* value, size_t size) {
  set_has_ad_cate();
  if (ad_cate_ == &::google::protobuf::internal::kEmptyString) {
    ad_cate_ = new ::std::string;
  }
  ad_cate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeedInfo::mutable_ad_cate() {
  set_has_ad_cate();
  if (ad_cate_ == &::google::protobuf::internal::kEmptyString) {
    ad_cate_ = new ::std::string;
  }
  return ad_cate_;
}
inline ::std::string* FeedInfo::release_ad_cate() {
  clear_has_ad_cate();
  if (ad_cate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ad_cate_;
    ad_cate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 price_limited = 18;
inline bool FeedInfo::has_price_limited() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FeedInfo::set_has_price_limited() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FeedInfo::clear_has_price_limited() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FeedInfo::clear_price_limited() {
  price_limited_ = 0u;
  clear_has_price_limited();
}
inline ::google::protobuf::uint32 FeedInfo::price_limited() const {
  return price_limited_;
}
inline void FeedInfo::set_price_limited(::google::protobuf::uint32 value) {
  set_has_price_limited();
  price_limited_ = value;
}

// -------------------------------------------------------------------

// KeyValue

// required string key = 1;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValue::key() const {
  return *key_;
}
inline void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 value = 2;
inline bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValue::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 KeyValue::value() const {
  return value_;
}
inline void KeyValue::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// IdxSrv2AdEngMsg

// required uint32 status = 1;
inline bool IdxSrv2AdEngMsg::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IdxSrv2AdEngMsg::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IdxSrv2AdEngMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IdxSrv2AdEngMsg::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 IdxSrv2AdEngMsg::status() const {
  return status_;
}
inline void IdxSrv2AdEngMsg::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// repeated .goods_interface.FeedInfo feedlist = 2;
inline int IdxSrv2AdEngMsg::feedlist_size() const {
  return feedlist_.size();
}
inline void IdxSrv2AdEngMsg::clear_feedlist() {
  feedlist_.Clear();
}
inline const ::goods_interface::FeedInfo& IdxSrv2AdEngMsg::feedlist(int index) const {
  return feedlist_.Get(index);
}
inline ::goods_interface::FeedInfo* IdxSrv2AdEngMsg::mutable_feedlist(int index) {
  return feedlist_.Mutable(index);
}
inline ::goods_interface::FeedInfo* IdxSrv2AdEngMsg::add_feedlist() {
  return feedlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goods_interface::FeedInfo >&
IdxSrv2AdEngMsg::feedlist() const {
  return feedlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::goods_interface::FeedInfo >*
IdxSrv2AdEngMsg::mutable_feedlist() {
  return &feedlist_;
}

// optional string hostname = 3;
inline bool IdxSrv2AdEngMsg::has_hostname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IdxSrv2AdEngMsg::set_has_hostname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IdxSrv2AdEngMsg::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IdxSrv2AdEngMsg::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& IdxSrv2AdEngMsg::hostname() const {
  return *hostname_;
}
inline void IdxSrv2AdEngMsg::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void IdxSrv2AdEngMsg::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void IdxSrv2AdEngMsg::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IdxSrv2AdEngMsg::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* IdxSrv2AdEngMsg::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace goods_interface

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_goods_5fresponse_2eproto__INCLUDED
