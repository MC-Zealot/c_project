#ifndef _FANSTARGET_AD_ALGORITHM_INTERFACE_HEADER_
#define _FANSTARGET_AD_ALGORITHM_INTERFACE_HEADER_

#include "algorithm_interface.h"
#include "fanstarget_ad.h"

const uint32_t MAX_FREQUENCY = 15; //¿´¹ã¸æ±£»¤ãÐÖµ
const uint32_t MIN_FREQUENCY = 1;  //¿´¹ã¸æ²¹Í¶ãÐÖµ
const uint64_t FLOW_AMOUNT = 54000;	//Ã¿5min ¿ÉÒÔÓÃÀ´²¹Í¶µÄÁ÷Á¿
const double BUY_OCCUPY_MAX_PACKAGE = 0.35f;  //ÐèÒªµ÷ÑÐÈ·¶¨µÄÊý¾Ý 
const uint16_t ADER_PROFILE_DB_NO = 21;		//¹ã¸æÖ÷profileÔÚlushanµÄ dbno
const uint16_t MID_INDUSTRY_DB_NO = 23;	//midsÊôÓÚÊ²Ã´·ÖÀà
const double TIME_WEIGHT[] = { 0.71, 0.79, 1.11, 0.89, 1.16, 1.41, 1.31, 1.19,
    1.35, 1.12, 1.44, 1.24, 1.37, 1.52, 1.52, 1.75,
	    1.68, 0.74, 0.41, 0.25, 0.2, 0.17, 0.24, 0.43 };

class FansTargetAlgorithmInterface : public AlgorithmInterface
{
	public:
		FANS_TAR_AD *fansAdThread[3];
		VEC_CAND fans_ad_vec_thread;
		FansTargetAlgorithmInterface(DbCompany*& p_db_company, int interface_id):
			AlgorithmInterface(p_db_company, interface_id){
				LOG_ERROR("init FansTargetAlgorithmInterface.");

				time_t now;
				time(&now);
				for(int i = 0;i < 3; i ++){
					
					fansAdThread[i] = new FANS_TAR_AD();
					fansAdThread[i]->type = 1;
					fansAdThread[i]->field_id = "0";
					fansAdThread[i]->bridge_uid = 0;
					fansAdThread[i]->buy_amount = 1000;
					fansAdThread[i]->max_package = 2000;
					fansAdThread[i]->finish_amount = 500;
					fansAdThread[i]->begin_time = now;
					fansAdThread[i]->ad_type = 2;
					fansAdThread[i]->brg_type = 1;
					fansAdThread[i]->alg_log = "";
					fans_ad_vec_thread.push_back(fansAdThread[i]);
				}
			}

		~FansTargetAlgorithmInterface() {
			LOG_ERROR("destroy FansTargetAlgorithmInterface.");
			for(int i = 0;i < 3; i ++){
				delete(fansAdThread[i]);
			}
		}


	public:
		int algorithm_core(uint64_t req_id,const AccessStr& access_str, VEC_CAND& vec_cand);
		int algorithm_core_new(uint64_t req_id, const AccessInfo* access_info, const VEC_CAND& input_vec, VEC_CAND& output_vec);
		int slow_order(VEC_CAND& cand_ids,VEC_CAND& output_vec);
		double get_random();
		int supply_order(uint16_t num,uint32_t flag,VEC_CAND& input_vec,VEC_CAND& output_vec);//
		int algorithm_log(VEC_CAND& output_vec,uint16_t return_type,uint16_t num,uint16_t startegy);
		int so_consume_time(struct timeval& start);	//Í
		int match_order(uint64_t uid, VEC_CAND& input_vec, VEC_CAND::const_iterator& result); //
		int gender_match_score(string& uid_gender, const char* info);	//
		int industry_match_score(vector<string>& industrys, const char* info);//Ð
		int	log_print(ACCESS_INFO* ai, VEC_CAND& output_vec, uint16_t return_type); //Êä³ö´òÓ¡ÈÕÖ¾
		int high_quality_user(uint64_t uid, VEC_CAND& input_vec, VEC_CAND& output_vec);
		int relation_replace(VEC_CAND& input_vec,VEC_CAND& output_vec,ACCESS_INFO* ai);
};
#endif
