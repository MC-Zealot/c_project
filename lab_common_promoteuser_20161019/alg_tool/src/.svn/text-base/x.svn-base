9c9,10
< const uint64_t FLOW_AMOUNT = 50000;	//每5min 可以用来补投的流量
---
> const uint64_t BUY_THRESHOLD = 3000;  // 订单补投阈值
> const uint64_t FLOW_AMOUNT = 54166;	//每5min 可以用来补投的流量
11,12d11
< const uint16_t ADER_PROFILE_DB_NO = 21;		//广告主profile在lushan的 dbno
< const uint16_t MID_INDUSTRY_DB_NO = 23;	//mids属于什么分类
19a19,21
> 
> 		FANS_TAR_AD *fansAdThread[4];
> 		VEC_CAND fans_ad_vec_thread;
22c24,44
< 		{}
---
> 		{
> 			LOG_ERROR("init FansTargetAlgorithmInterface.");
> 			
> 			time_t now;
> 			time(&now);
> 
> 			for(int i = 0;i < 4; i ++){
> 				fansAdThread[i] = new FANS_TAR_AD();
> 				fansAdThread[i]->type = 1;
> 				fansAdThread[i]->field_id = "0";
> 				fansAdThread[i]->bridge_uid = 0;
> 				fansAdThread[i]->buy_amount = 1000;
> 				fansAdThread[i]->max_package = 2000;
> 				fansAdThread[i]->finish_amount = 500;
> 				fansAdThread[i]->begin_time = now;
> 				fansAdThread[i]->ad_type = 2;
> 				fansAdThread[i]->brg_type = 1;
> 
> 				fans_ad_vec_thread.push_back(fansAdThread[i]);
> 			}
> 		}
24c46,51
< 		~FansTargetAlgorithmInterface() {}
---
> 		~FansTargetAlgorithmInterface() {
> 			LOG_ERROR("destroy FansTargetAlgorithmInterface.");
> 			for(int i = 0;i < 4; i ++){
> 				delete(fansAdThread[i]);
> 			}
> 		}
32c59
< 		int algorithm_log(VEC_CAND& output_vec,uint16_t return_type,uint16_t num,uint16_t startegy);	//返回算法层日志
---
> 		int algorithm_log(VEC_CAND& output_vec,uint16_t return_type,uint16_t num);	//返回算法层日志
34,37c61
< 		int match_order(uint64_t uid, VEC_CAND& input_vec, VEC_CAND::const_iterator& result); //根据profile匹配广告
< 		int gender_match_score(string& uid_gender, const char* info);	//性别匹配得分
< 		int industry_match_score(vector<string>& industrys, const char* info);//行业匹配得分
< 		int	log_print(ACCESS_INFO* ai, VEC_CAND& output_vec, uint16_t return_type); //输出打印日志
---
> 		int high_quality_user(uint64_t uid, VEC_CAND& input_vec, VEC_CAND& output_vec);	//永生优质流量
