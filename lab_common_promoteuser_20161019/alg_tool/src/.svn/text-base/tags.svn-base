!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
CateSim	ContAdvSim.cpp	/^float CateSim(const uint32_t unDestCateCode, const float fDestCateScore1, const float fDestCateScore2, _vbinfo *vbinfo)$/;"	f	signature:(const uint32_t unDestCateCode, const float fDestCateScore1, const float fDestCateScore2, _vbinfo *vbinfo)
ContAdvSimRank	ContAdvSim.cpp	/^void ContAdvSimRank(WB& wbcont,vector<FeedInfo>& in, vector< FeedInfo >& out,const float& fSimTh_Bottom )$/;"	f	signature:(WB& wbcont,vector<FeedInfo>& in, vector< FeedInfo >& out,const float& fSimTh_Bottom )
ContAdvSimRank	ContAdvSim.h	/^void ContAdvSimRank(WB& wbcont,vector<FeedInfo>& in, vector< FeedInfo >& out,const float& fSimTh_Bottom );$/;"	p	signature:(WB& wbcont,vector<FeedInfo>& in, vector< FeedInfo >& out,const float& fSimTh_Bottom )
ContSim2	ContAdvSim.cpp	/^void ContSim2(set<string>& setMatchedKeywords, vector<pair<string,pair<uint32_t,uint32_t> > >& vtrDestKeywords, const uint32_t unDestCateCode,$/;"	f	signature:(set<string>& setMatchedKeywords, vector<pair<string,pair<uint32_t,uint32_t> > >& vtrDestKeywords, const uint32_t unDestCateCode, const float fDestCateScore1, const float fDestCateScore2,float& fSimScore, _vbinfo *vbinfo)
ContSimDes	ContAdvSim.cpp	/^void ContSimDes(set<string>& setMatchedKeywords, vector<pair<string,pair<uint32_t,uint32_t> > >& vtrDestKeywords,$/;"	f	signature:(set<string>& setMatchedKeywords, vector<pair<string,pair<uint32_t,uint32_t> > >& vtrDestKeywords, vector<pair<uint32_t,pair< float,float > > >& vtrCateCode,float& fSimScore, _vbinfo *vbinfo)
DESWORDSCATE	ContAdvSim.h	/^typedef struct DESWORDSCATE{$/;"	s
DESWORDSCATE::vtrCateCode	ContAdvSim.h	/^vector<pair<uint32_t,pair< float,float > > >  vtrCateCode;   \/\/分类编码, 一级分类分值, 二级分类分值$/;"	m	struct:DESWORDSCATE	access:public
DESWORDSCATE::vtrKeywords	ContAdvSim.h	/^vector<pair<string,pair<uint32_t, uint32_t > > >  vtrKeywords;  \/\/关键词，权重，词性$/;"	m	struct:DESWORDSCATE	access:public
DesWordsCate	ContAdvSim.h	/^}DesWordsCate;$/;"	t	typeref:struct:DESWORDSCATE
Discrete_NUM	user_rpm_algorithm_interface.h	/^const int Discrete_NUM = 10;		\/\/ 离散化参数$/;"	v
FeedInfo	ContAdvSim.h	/^struct FeedInfo {$/;"	s
FeedInfo::adid	ContAdvSim.h	/^    uint64 adid ; \/\/广 告id$/;"	m	struct:FeedInfo	access:public
FeedInfo::bidtype	ContAdvSim.h	/^    uint32 bidtype;\/\/ 1:CPF; 2:CPE;$/;"	m	struct:FeedInfo	access:public
FeedInfo::cost_	ContAdvSim.h	/^   uint32_t        cost_;                          \/\/实际扣费价格$/;"	m	struct:FeedInfo	access:public
FeedInfo::creative	ContAdvSim.h	/^    string creative;   \/\/ for aim feed$/;"	m	struct:FeedInfo	access:public
FeedInfo::ctr_	ContAdvSim.h	/^   double          ctr_;                           \/\/总终ctr$/;"	m	struct:FeedInfo	access:public
FeedInfo::custid	ContAdvSim.h	/^    uint64 custid ;\/\/ 广 告主的uid$/;"	m	struct:FeedInfo	access:public
FeedInfo::desWordsCate	ContAdvSim.h	/^   DesWordsCate desWordsCate;\/\/heailong$/;"	m	struct:FeedInfo	access:public
FeedInfo::feedid	ContAdvSim.h	/^    uint64 feedid ;\/\/ feed id$/;"	m	struct:FeedInfo	access:public
FeedInfo::matchlevel	ContAdvSim.h	/^    uint32 matchlevel;\/\/ 0 : fans;1 : non-fans;2 : all；$/;"	m	struct:FeedInfo	access:public
FeedInfo::oriWordsCate	ContAdvSim.h	/^   OriWordsCate  oriWordsCate;  \/\/heailong$/;"	m	struct:FeedInfo	access:public
FeedInfo::price	ContAdvSim.h	/^    uint32 price ; \/\/ 出 价价格$/;"	m	struct:FeedInfo	access:public
FeedInfo::pricetype	ContAdvSim.h	/^    uint32 pricetype; \/\/价格方式1:dim;2:fans;3:custom_audience$/;"	m	struct:FeedInfo	access:public
FeedInfo::ptime	ContAdvSim.h	/^    uint64 ptime ;\/\/ feed发 布时间$/;"	m	struct:FeedInfo	access:public
FeedInfo::rank_score_	ContAdvSim.h	/^   double          rank_score_;                    \/\/排序得分$/;"	m	struct:FeedInfo	access:public
FeedInfo::retWordsCate	ContAdvSim.h	/^   RetWordsCate retWordsCate;\/\/匹配内容，日志打印  \/\/heailong$/;"	m	struct:FeedInfo	access:public
FeedInfo::royalty_price	ContAdvSim.h	/^    float royalty_price; \/\/分 成比率$/;"	m	struct:FeedInfo	access:public
FeedInfo::score	ContAdvSim.h	/^    uint32 score; \/\/ 0 - 1000$/;"	m	struct:FeedInfo	access:public
FeedInfo::simScore	ContAdvSim.h	/^    float simScore; \/\/匹配分值    ，日志打印 \/\/heailong$/;"	m	struct:FeedInfo	access:public
FeedInfo::target_ctr_	ContAdvSim.h	/^   double          target_ctr_;                    \/\/层次平滑ctr$/;"	m	struct:FeedInfo	access:public
FeedInfo::url_md5	ContAdvSim.h	/^    uint32 url_md5;\/\/url的md5编码值$/;"	m	struct:FeedInfo	access:public
GoodsAdAlgorithmInterface	goods_ad_algorithm_interface.cpp	/^DYN_ALGORITHMS(GoodsAdAlgorithmInterface);$/;"	v
GoodsAdAlgorithmInterface	goods_ad_algorithm_interface.h	/^		GoodsAdAlgorithmInterface(DbCompany*& p_db_company, int interface_id):$/;"	f	class:GoodsAdAlgorithmInterface	access:public	signature:(DbCompany*& p_db_company, int interface_id)
GoodsAdAlgorithmInterface	goods_ad_algorithm_interface.h	/^class GoodsAdAlgorithmInterface : public AlgorithmInterface{$/;"	c	inherits:AlgorithmInterface
GoodsAdAlgorithmInterface::GoodsAdAlgorithmInterface	goods_ad_algorithm_interface.h	/^		GoodsAdAlgorithmInterface(DbCompany*& p_db_company, int interface_id):$/;"	f	class:GoodsAdAlgorithmInterface	access:public	signature:(DbCompany*& p_db_company, int interface_id)
GoodsAdAlgorithmInterface::algorithm_core	goods_ad_algorithm_interface.cpp	/^int GoodsAdAlgorithmInterface::algorithm_core(uint64_t req_id, const AccessStr& access_str,VEC_CAND& vec_cand){	$/;"	f	class:GoodsAdAlgorithmInterface	signature:(uint64_t req_id, const AccessStr& access_str,VEC_CAND& vec_cand)
GoodsAdAlgorithmInterface::algorithm_core	goods_ad_algorithm_interface.h	/^		int algorithm_core(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand);$/;"	p	class:GoodsAdAlgorithmInterface	access:public	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
GoodsAdAlgorithmInterface::algorithm_core_new	goods_ad_algorithm_interface.cpp	/^int GoodsAdAlgorithmInterface::algorithm_core_new(uint64_t req_id, const AccessInfo* access_info, $/;"	f	class:GoodsAdAlgorithmInterface	signature:(uint64_t req_id, const AccessInfo* access_info, const VEC_CAND& input_vec, VEC_CAND& output_vec)
GoodsAdAlgorithmInterface::algorithm_core_new	goods_ad_algorithm_interface.h	/^		int algorithm_core_new(uint64_t req_id, const AccessInfo* access_info, const VEC_CAND& input_vec, VEC_CAND& output_vec);$/;"	p	class:GoodsAdAlgorithmInterface	access:public	signature:(uint64_t req_id, const AccessInfo* access_info, const VEC_CAND& input_vec, VEC_CAND& output_vec)
GoodsAdAlgorithmInterface::~GoodsAdAlgorithmInterface	goods_ad_algorithm_interface.h	/^		~GoodsAdAlgorithmInterface(){$/;"	f	class:GoodsAdAlgorithmInterface	access:public	signature:()
InterAlgorithmInterface	inter_algorithm_interface.cpp	/^DYN_ALGORITHMS(InterAlgorithmInterface);$/;"	v
InterAlgorithmInterface	inter_algorithm_interface.h	/^		InterAlgorithmInterface(DbCompany*& p_db_company, int interface_id):$/;"	f	class:InterAlgorithmInterface	access:public	signature:(DbCompany*& p_db_company, int interface_id)
InterAlgorithmInterface	inter_algorithm_interface.h	/^class InterAlgorithmInterface : public AlgorithmInterface{$/;"	c	inherits:AlgorithmInterface
InterAlgorithmInterface::InterAlgorithmInterface	inter_algorithm_interface.h	/^		InterAlgorithmInterface(DbCompany*& p_db_company, int interface_id):$/;"	f	class:InterAlgorithmInterface	access:public	signature:(DbCompany*& p_db_company, int interface_id)
InterAlgorithmInterface::algorithm_core	inter_algorithm_interface.cpp	/^int InterAlgorithmInterface::algorithm_core(uint64_t req_id, $/;"	f	class:InterAlgorithmInterface	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
InterAlgorithmInterface::algorithm_core	inter_algorithm_interface.h	/^		int algorithm_core(uint64_t req_id, $/;"	p	class:InterAlgorithmInterface	access:public	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
InterAlgorithmInterface::~InterAlgorithmInterface	inter_algorithm_interface.h	/^		~InterAlgorithmInterface(){$/;"	f	class:InterAlgorithmInterface	access:public	signature:()
KeywordsVtrSim2	ContAdvSim.cpp	/^float KeywordsVtrSim2(set<string>& setMatchedKeywords, vector<pair<string,pair<uint32_t,uint32_t> > >& vtrDestKeywords, _vbinfo *vbinfo)$/;"	f	signature:(set<string>& setMatchedKeywords, vector<pair<string,pair<uint32_t,uint32_t> > >& vtrDestKeywords, _vbinfo *vbinfo)
LogN	ContAdvSim.cpp	/^double LogN(const double n, const double a)$/;"	f	signature:(const double n, const double a)
MAX_QMD_MAGIC_NUM	user_rpm_algorithm_interface.h	/^const int MAX_QMD_MAGIC_NUM = 10000;$/;"	v
ORIWORdSCATE	ContAdvSim.h	/^typedef struct ORIWORdSCATE{ $/;"	s
ORIWORdSCATE::fCateScore1	ContAdvSim.h	/^float fCateScore1;    \/\/一级分类分值$/;"	m	struct:ORIWORdSCATE	access:public
ORIWORdSCATE::fCateScore2	ContAdvSim.h	/^float fCateScore2;    \/\/二级分类分值$/;"	m	struct:ORIWORdSCATE	access:public
ORIWORdSCATE::unCateCode	ContAdvSim.h	/^uint32_t unCateCode;   \/\/分类编码$/;"	m	struct:ORIWORdSCATE	access:public
ORIWORdSCATE::vtrKeywords	ContAdvSim.h	/^vector<pair<string,pair<uint32_t, uint32_t > > >  vtrKeywords;  \/\/关键词，权重，词性$/;"	m	struct:ORIWORdSCATE	access:public
OriWordsCate	ContAdvSim.h	/^}OriWordsCate;$/;"	t	typeref:struct:ORIWORdSCATE
QMD_MAP	user_rpm_algorithm_interface.h	/^typedef __gnu_cxx::hash_map<uint64_t, uint32_t> QMD_MAP;$/;"	t
RETDESWORDSCATE	ContAdvSim.h	/^typedef struct RETDESWORDSCATE{$/;"	s
RETDESWORDSCATE::fSim	ContAdvSim.h	/^float  fSim; \/\/匹配值$/;"	m	struct:RETDESWORDSCATE	access:public
RETDESWORDSCATE::setMatchedKeywords	ContAdvSim.h	/^set<string> setMatchedKeywords;\/\/匹配字符串$/;"	m	struct:RETDESWORDSCATE	access:public
RETDESWORDSCATE::unCateCode	ContAdvSim.h	/^uint32_t  unCateCode ;\/\/匹配分类编码$/;"	m	struct:RETDESWORDSCATE	access:public
RETORIWORDSCATE	ContAdvSim.h	/^typedef struct RETORIWORDSCATE{$/;"	s
RETORIWORDSCATE::fSim	ContAdvSim.h	/^float  fSim; \/\/匹配值$/;"	m	struct:RETORIWORDSCATE	access:public
RETORIWORDSCATE::setMatchedKeywords	ContAdvSim.h	/^set<string> setMatchedKeywords;\/\/匹配字符串$/;"	m	struct:RETORIWORDSCATE	access:public
RETORIWORDSCATE::unCateCode	ContAdvSim.h	/^uint32_t  unCateCode;\/\/匹配分类编码$/;"	m	struct:RETORIWORDSCATE	access:public
RETWORDSCATE	ContAdvSim.h	/^typedef struct RETWORDSCATE{$/;"	s
RETWORDSCATE::retDesWordsCate	ContAdvSim.h	/^ RetDesWordsCate retDesWordsCate;$/;"	m	struct:RETWORDSCATE	access:public
RETWORDSCATE::retOriWordsCate	ContAdvSim.h	/^ RetOriWordsCate retOriWordsCate;$/;"	m	struct:RETWORDSCATE	access:public
RetDesWordsCate	ContAdvSim.h	/^}RetDesWordsCate;   \/\/投递属性匹配$/;"	t	typeref:struct:RETDESWORDSCATE
RetOriWordsCate	ContAdvSim.h	/^}RetOriWordsCate;   \/\/商品本身属性匹配$/;"	t	typeref:struct:RETORIWORDSCATE
RetWordsCate	ContAdvSim.h	/^}RetWordsCate;   \/\/商品本身属性匹配$/;"	t	typeref:struct:RETWORDSCATE
SetSrc	ContAdvSim.cpp	/^void SetSrc(vector<pair<string,pair<uint32_t,uint32_t > > >& vtrSrcKeywords, const uint32_t unSrcCateCode, const float fSrcCateScore1, const float fSrcCateScore2, _vbinfo *vbinfo)$/;"	f	signature:(vector<pair<string,pair<uint32_t,uint32_t > > >& vtrSrcKeywords, const uint32_t unSrcCateCode, const float fSrcCateScore1, const float fSrcCateScore2, _vbinfo *vbinfo)
UserRpmAlgorithmInterface	user_rpm_algorithm_interface.h	/^		UserRpmAlgorithmInterface(DbCompany*& p_db_company, int interface_id):$/;"	f	class:UserRpmAlgorithmInterface	access:public	signature:(DbCompany*& p_db_company, int interface_id)
UserRpmAlgorithmInterface	user_rpm_algorithm_interface.h	/^class UserRpmAlgorithmInterface : public AlgorithmInterface{$/;"	c	inherits:AlgorithmInterface
UserRpmAlgorithmInterface::UserRpmAlgorithmInterface	user_rpm_algorithm_interface.h	/^		UserRpmAlgorithmInterface(DbCompany*& p_db_company, int interface_id):$/;"	f	class:UserRpmAlgorithmInterface	access:public	signature:(DbCompany*& p_db_company, int interface_id)
UserRpmAlgorithmInterface::algorithm_core	user_rpm_algorithm_interface.cpp	/^int UserRpmAlgorithmInterface::algorithm_core(uint64_t req_id, const AccessStr& access_str,$/;"	f	class:UserRpmAlgorithmInterface	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
UserRpmAlgorithmInterface::algorithm_core	user_rpm_algorithm_interface.h	/^		int algorithm_core(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand);$/;"	p	class:UserRpmAlgorithmInterface	access:public	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
UserRpmAlgorithmInterface::binarySearch	user_rpm_algorithm_interface.h	/^		static int binarySearch(const double key, vector<double>& data){$/;"	f	class:UserRpmAlgorithmInterface	access:public	signature:(const double key, vector<double>& data)
UserRpmAlgorithmInterface::countRpmScore	user_rpm_algorithm_interface.cpp	/^uint64_t UserRpmAlgorithmInterface::countRpmScore(const vector<double>& feature, $/;"	f	class:UserRpmAlgorithmInterface	signature:(const vector<double>& feature, const vector<double>& para)
UserRpmAlgorithmInterface::countRpmScore	user_rpm_algorithm_interface.h	/^		uint64_t countRpmScore(const vector<double>& feature, const vector<double>& para);$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(const vector<double>& feature, const vector<double>& para)
UserRpmAlgorithmInterface::featureDiscrete	user_rpm_algorithm_interface.cpp	/^void UserRpmAlgorithmInterface::featureDiscrete(vector<double>& origin_feature, $/;"	f	class:UserRpmAlgorithmInterface	signature:(vector<double>& origin_feature, const map<int,vector<double> >& mm, const vector<int>& needDisFea, vector<double>& res_feature)
UserRpmAlgorithmInterface::featureDiscrete	user_rpm_algorithm_interface.h	/^		void featureDiscrete(vector<double>& origin_feature, const map<int,vector<double> >& mm,$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(vector<double>& origin_feature, const map<int,vector<double> >& mm, const vector<int>& needDisFea, vector<double>& res_feature)
UserRpmAlgorithmInterface::get_qmd_data	user_rpm_algorithm_interface.cpp	/^int UserRpmAlgorithmInterface::get_qmd_data(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result){$/;"	f	class:UserRpmAlgorithmInterface	signature:(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result)
UserRpmAlgorithmInterface::get_qmd_data	user_rpm_algorithm_interface.h	/^		int get_qmd_data(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result);$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result)
UserRpmAlgorithmInterface::get_qmd_data_lushan	user_rpm_algorithm_interface.cpp	/^int UserRpmAlgorithmInterface::get_qmd_data_lushan(DbCompany* p_db_company, uint64_t uid, $/;"	f	class:UserRpmAlgorithmInterface	signature:(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result)
UserRpmAlgorithmInterface::get_qmd_data_lushan	user_rpm_algorithm_interface.h	/^		int get_qmd_data_lushan(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result);$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result)
UserRpmAlgorithmInterface::makeFeature	user_rpm_algorithm_interface.cpp	/^void UserRpmAlgorithmInterface::makeFeature(const UserFeature* userfeature, $/;"	f	class:UserRpmAlgorithmInterface	signature:(const UserFeature* userfeature, const UserFeature* recyfeature, const uint32_t bridgeNum, const uint64_t bridgeUid, const QMD_MAP& qmd_result, vector<double> &feature)
UserRpmAlgorithmInterface::makeFeature	user_rpm_algorithm_interface.h	/^		void makeFeature(const UserFeature* userfeature, const UserFeature* recyfeature, $/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(const UserFeature* userfeature, const UserFeature* recyfeature, const uint32_t bridgeNum, const uint64_t bridgeUid, const QMD_MAP& qmd_result, vector<double> &feature)
UserRpmAlgorithmInterface::reversebytes_uint32t	user_rpm_algorithm_interface.h	/^		uint32_t reversebytes_uint32t(uint32_t value){$/;"	f	class:UserRpmAlgorithmInterface	access:public	signature:(uint32_t value)
UserRpmAlgorithmInterface::split_string_map_qmd	user_rpm_algorithm_interface.cpp	/^void UserRpmAlgorithmInterface::split_string_map_qmd(const char*& str_input, char sep_char, $/;"	f	class:UserRpmAlgorithmInterface	signature:(const char*& str_input, char sep_char, char second_sep_char, QMD_MAP& map_ids, uint32_t limit)
UserRpmAlgorithmInterface::split_string_map_qmd	user_rpm_algorithm_interface.h	/^		void split_string_map_qmd(const char*& str_input, char sep_char, char second_sep_char,$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(const char*& str_input, char sep_char, char second_sep_char, QMD_MAP& map_ids, uint32_t limit = 0)
UserRpmAlgorithmInterface::~UserRpmAlgorithmInterface	user_rpm_algorithm_interface.h	/^		~UserRpmAlgorithmInterface(){$/;"	f	class:UserRpmAlgorithmInterface	access:public	signature:()
WB	ContAdvSim.h	/^typedef struct WB{$/;"	s
WB	ContAdvSim.h	/^}WB;$/;"	t	typeref:struct:WB
WB::fCateScore1	ContAdvSim.h	/^float  fCateScore1;    \/\/一级分类分值$/;"	m	struct:WB	access:public
WB::fCateScore2	ContAdvSim.h	/^float fCateScore2;    \/\/二级分类分值$/;"	m	struct:WB	access:public
WB::unCateCode	ContAdvSim.h	/^uint32_t unCateCode;   \/\/分类编码$/;"	m	struct:WB	access:public
WB::vtrKeywords	ContAdvSim.h	/^vector<pair<string,pair<uint32_t, uint32_t > > >  vtrKeywords;  \/\/关键词，权重，词性$/;"	m	struct:WB	access:public
_GOODS_AD_ALGORITHM_HEADER_	goods_ad_algorithm_interface.h	2;"	d
_INTER_ALGORITHM_INTERFACE_HEADER_	inter_algorithm_interface.h	2;"	d
_USER_RPM_ALGORITHM_USER_RPMFACE_HEADER_	user_rpm_algorithm_interface.h	2;"	d
_qmd_data_pack	user_rpm_algorithm_interface.h	/^typedef struct _qmd_data_pack{$/;"	s
_qmd_data_pack::num	user_rpm_algorithm_interface.h	/^	int32_t num;$/;"	m	struct:_qmd_data_pack	access:public
_qmd_data_pack::qmd_data	user_rpm_algorithm_interface.h	/^	char qmd_data[0];$/;"	m	struct:_qmd_data_pack	access:public
_vbinfo	ContAdvSim.cpp	/^struct _vbinfo{$/;"	s	file:
_vbinfo::fSrcCateScore1	ContAdvSim.cpp	/^    float fSrcCateScore1;         \/\/ 源微博一级分类分值 $/;"	m	struct:_vbinfo	file:	access:public
_vbinfo::fSrcCateScore2	ContAdvSim.cpp	/^    float fSrcCateScore2;         \/\/ 源微博二级分类分值 $/;"	m	struct:_vbinfo	file:	access:public
_vbinfo::fSrcKeywordsVtrMode	ContAdvSim.cpp	/^    float fSrcKeywordsVtrMode;    \/\/ 源微博关键词向量的模 $/;"	m	struct:_vbinfo	file:	access:public
_vbinfo::mapSrcKeywords	ContAdvSim.cpp	/^    map<string,pair<float,uint32_t> > mapSrcKeywords;$/;"	m	struct:_vbinfo	file:	access:public
_vbinfo::unSrcCateCode	ContAdvSim.cpp	/^    uint32_t unSrcCateCode;       \/\/ 源微博分类编码 $/;"	m	struct:_vbinfo	file:	access:public
adid	ContAdvSim.h	/^    uint64 adid ; \/\/广 告id$/;"	m	struct:FeedInfo	access:public
algorithm_core	goods_ad_algorithm_interface.cpp	/^int GoodsAdAlgorithmInterface::algorithm_core(uint64_t req_id, const AccessStr& access_str,VEC_CAND& vec_cand){	$/;"	f	class:GoodsAdAlgorithmInterface	signature:(uint64_t req_id, const AccessStr& access_str,VEC_CAND& vec_cand)
algorithm_core	goods_ad_algorithm_interface.h	/^		int algorithm_core(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand);$/;"	p	class:GoodsAdAlgorithmInterface	access:public	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
algorithm_core	inter_algorithm_interface.cpp	/^int InterAlgorithmInterface::algorithm_core(uint64_t req_id, $/;"	f	class:InterAlgorithmInterface	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
algorithm_core	inter_algorithm_interface.h	/^		int algorithm_core(uint64_t req_id, $/;"	p	class:InterAlgorithmInterface	access:public	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
algorithm_core	user_rpm_algorithm_interface.cpp	/^int UserRpmAlgorithmInterface::algorithm_core(uint64_t req_id, const AccessStr& access_str,$/;"	f	class:UserRpmAlgorithmInterface	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
algorithm_core	user_rpm_algorithm_interface.h	/^		int algorithm_core(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand);$/;"	p	class:UserRpmAlgorithmInterface	access:public	signature:(uint64_t req_id, const AccessStr& access_str, VEC_CAND& vec_cand)
algorithm_core_new	goods_ad_algorithm_interface.cpp	/^int GoodsAdAlgorithmInterface::algorithm_core_new(uint64_t req_id, const AccessInfo* access_info, $/;"	f	class:GoodsAdAlgorithmInterface	signature:(uint64_t req_id, const AccessInfo* access_info, const VEC_CAND& input_vec, VEC_CAND& output_vec)
algorithm_core_new	goods_ad_algorithm_interface.h	/^		int algorithm_core_new(uint64_t req_id, const AccessInfo* access_info, const VEC_CAND& input_vec, VEC_CAND& output_vec);$/;"	p	class:GoodsAdAlgorithmInterface	access:public	signature:(uint64_t req_id, const AccessInfo* access_info, const VEC_CAND& input_vec, VEC_CAND& output_vec)
bidtype	ContAdvSim.h	/^    uint32 bidtype;\/\/ 1:CPF; 2:CPE;$/;"	m	struct:FeedInfo	access:public
binarySearch	user_rpm_algorithm_interface.h	/^		static int binarySearch(const double key, vector<double>& data){$/;"	f	class:UserRpmAlgorithmInterface	access:public	signature:(const double key, vector<double>& data)
cost_	ContAdvSim.h	/^   uint32_t        cost_;                          \/\/实际扣费价格$/;"	m	struct:FeedInfo	access:public
countRpmScore	user_rpm_algorithm_interface.cpp	/^uint64_t UserRpmAlgorithmInterface::countRpmScore(const vector<double>& feature, $/;"	f	class:UserRpmAlgorithmInterface	signature:(const vector<double>& feature, const vector<double>& para)
countRpmScore	user_rpm_algorithm_interface.h	/^		uint64_t countRpmScore(const vector<double>& feature, const vector<double>& para);$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(const vector<double>& feature, const vector<double>& para)
creative	ContAdvSim.h	/^    string creative;   \/\/ for aim feed$/;"	m	struct:FeedInfo	access:public
ctr_	ContAdvSim.h	/^   double          ctr_;                           \/\/总终ctr$/;"	m	struct:FeedInfo	access:public
custid	ContAdvSim.h	/^    uint64 custid ;\/\/ 广 告主的uid$/;"	m	struct:FeedInfo	access:public
desWordsCate	ContAdvSim.h	/^   DesWordsCate desWordsCate;\/\/heailong$/;"	m	struct:FeedInfo	access:public
fCateScore1	ContAdvSim.h	/^float  fCateScore1;    \/\/一级分类分值$/;"	m	struct:WB	access:public
fCateScore1	ContAdvSim.h	/^float fCateScore1;    \/\/一级分类分值$/;"	m	struct:ORIWORdSCATE	access:public
fCateScore2	ContAdvSim.h	/^float fCateScore2;    \/\/二级分类分值$/;"	m	struct:ORIWORdSCATE	access:public
fCateScore2	ContAdvSim.h	/^float fCateScore2;    \/\/二级分类分值$/;"	m	struct:WB	access:public
fSim	ContAdvSim.h	/^float  fSim; \/\/匹配值$/;"	m	struct:RETDESWORDSCATE	access:public
fSim	ContAdvSim.h	/^float  fSim; \/\/匹配值$/;"	m	struct:RETORIWORDSCATE	access:public
fSrcCateScore1	ContAdvSim.cpp	/^    float fSrcCateScore1;         \/\/ 源微博一级分类分值 $/;"	m	struct:_vbinfo	file:	access:public
fSrcCateScore2	ContAdvSim.cpp	/^    float fSrcCateScore2;         \/\/ 源微博二级分类分值 $/;"	m	struct:_vbinfo	file:	access:public
fSrcKeywordsVtrMode	ContAdvSim.cpp	/^    float fSrcKeywordsVtrMode;    \/\/ 源微博关键词向量的模 $/;"	m	struct:_vbinfo	file:	access:public
featureDiscrete	user_rpm_algorithm_interface.cpp	/^void UserRpmAlgorithmInterface::featureDiscrete(vector<double>& origin_feature, $/;"	f	class:UserRpmAlgorithmInterface	signature:(vector<double>& origin_feature, const map<int,vector<double> >& mm, const vector<int>& needDisFea, vector<double>& res_feature)
featureDiscrete	user_rpm_algorithm_interface.h	/^		void featureDiscrete(vector<double>& origin_feature, const map<int,vector<double> >& mm,$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(vector<double>& origin_feature, const map<int,vector<double> >& mm, const vector<int>& needDisFea, vector<double>& res_feature)
feedid	ContAdvSim.h	/^    uint64 feedid ;\/\/ feed id$/;"	m	struct:FeedInfo	access:public
get_qmd_data	user_rpm_algorithm_interface.cpp	/^int UserRpmAlgorithmInterface::get_qmd_data(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result){$/;"	f	class:UserRpmAlgorithmInterface	signature:(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result)
get_qmd_data	user_rpm_algorithm_interface.h	/^		int get_qmd_data(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result);$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result)
get_qmd_data_lushan	user_rpm_algorithm_interface.cpp	/^int UserRpmAlgorithmInterface::get_qmd_data_lushan(DbCompany* p_db_company, uint64_t uid, $/;"	f	class:UserRpmAlgorithmInterface	signature:(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result)
get_qmd_data_lushan	user_rpm_algorithm_interface.h	/^		int get_qmd_data_lushan(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result);$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(DbCompany* p_db_company, uint64_t uid, QMD_MAP& qmd_result)
kAdsNode	sim_rangking_plugin.cpp	/^const char kAdsNode[] = "deliver";$/;"	v
kClassNode	sim_rangking_plugin.cpp	/^const char kClassNode[] = "class";$/;"	v
kCustomNode	sim_rangking_plugin.cpp	/^const char kCustomNode[] = "cust";$/;"	v
kObjectNode	sim_rangking_plugin.cpp	/^const char kObjectNode[] = "object";$/;"	v
kRootNode	sim_rangking_plugin.cpp	/^const char kRootNode[] = "root";$/;"	v
makeFeature	user_rpm_algorithm_interface.cpp	/^void UserRpmAlgorithmInterface::makeFeature(const UserFeature* userfeature, $/;"	f	class:UserRpmAlgorithmInterface	signature:(const UserFeature* userfeature, const UserFeature* recyfeature, const uint32_t bridgeNum, const uint64_t bridgeUid, const QMD_MAP& qmd_result, vector<double> &feature)
makeFeature	user_rpm_algorithm_interface.h	/^		void makeFeature(const UserFeature* userfeature, const UserFeature* recyfeature, $/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(const UserFeature* userfeature, const UserFeature* recyfeature, const uint32_t bridgeNum, const uint64_t bridgeUid, const QMD_MAP& qmd_result, vector<double> &feature)
mapSrcKeywords	ContAdvSim.cpp	/^    map<string,pair<float,uint32_t> > mapSrcKeywords;$/;"	m	struct:_vbinfo	file:	access:public
matchlevel	ContAdvSim.h	/^    uint32 matchlevel;\/\/ 0 : fans;1 : non-fans;2 : all；$/;"	m	struct:FeedInfo	access:public
num	user_rpm_algorithm_interface.h	/^	int32_t num;$/;"	m	struct:_qmd_data_pack	access:public
oriWordsCate	ContAdvSim.h	/^   OriWordsCate  oriWordsCate;  \/\/heailong$/;"	m	struct:FeedInfo	access:public
price	ContAdvSim.h	/^    uint32 price ; \/\/ 出 价价格$/;"	m	struct:FeedInfo	access:public
pricetype	ContAdvSim.h	/^    uint32 pricetype; \/\/价格方式1:dim;2:fans;3:custom_audience$/;"	m	struct:FeedInfo	access:public
ptime	ContAdvSim.h	/^    uint64 ptime ;\/\/ feed发 布时间$/;"	m	struct:FeedInfo	access:public
qmd_data	user_rpm_algorithm_interface.h	/^	char qmd_data[0];$/;"	m	struct:_qmd_data_pack	access:public
qmd_data_pack_t	user_rpm_algorithm_interface.h	/^}qmd_data_pack_t;$/;"	t	typeref:struct:_qmd_data_pack
rank	ContAdvSim.h	/^int rank(const std::map<std::string, std::string> &q_map,$/;"	p	signature:(const std::map<std::string, std::string> &q_map, const std::map<std::string, std::string> &userinfo, std::vector<FeedInfo> &ad_info_list, std::vector<FeedInfo>& ad_choose, std::vector<std::map<std::string, std::string> >& feature_map)
rank	sim_rangking_plugin.cpp	/^\/*override*\/int rank(const std::map<std::string, std::string> &q_map,$/;"	f	signature:(const std::map<std::string, std::string> &q_map, const std::map<std::string, std::string> &userinfo, std::vector<FeedInfo> &ad_info_list, std::vector<FeedInfo>& ad_choose, std::vector<std::map<std::string, std::string> >& feature_map)
rank_score_	ContAdvSim.h	/^   double          rank_score_;                    \/\/排序得分$/;"	m	struct:FeedInfo	access:public
retDesWordsCate	ContAdvSim.h	/^ RetDesWordsCate retDesWordsCate;$/;"	m	struct:RETWORDSCATE	access:public
retOriWordsCate	ContAdvSim.h	/^ RetOriWordsCate retOriWordsCate;$/;"	m	struct:RETWORDSCATE	access:public
retWordsCate	ContAdvSim.h	/^   RetWordsCate retWordsCate;\/\/匹配内容，日志打印  \/\/heailong$/;"	m	struct:FeedInfo	access:public
reversebytes_uint32t	user_rpm_algorithm_interface.h	/^		uint32_t reversebytes_uint32t(uint32_t value){$/;"	f	class:UserRpmAlgorithmInterface	access:public	signature:(uint32_t value)
royalty_price	ContAdvSim.h	/^    float royalty_price; \/\/分 成比率$/;"	m	struct:FeedInfo	access:public
score	ContAdvSim.h	/^    uint32 score; \/\/ 0 - 1000$/;"	m	struct:FeedInfo	access:public
setMatchedKeywords	ContAdvSim.h	/^set<string> setMatchedKeywords;\/\/匹配字符串$/;"	m	struct:RETDESWORDSCATE	access:public
setMatchedKeywords	ContAdvSim.h	/^set<string> setMatchedKeywords;\/\/匹配字符串$/;"	m	struct:RETORIWORDSCATE	access:public
simScore	ContAdvSim.h	/^    float simScore; \/\/匹配分值    ，日志打印 \/\/heailong$/;"	m	struct:FeedInfo	access:public
split_string_map_qmd	user_rpm_algorithm_interface.cpp	/^void UserRpmAlgorithmInterface::split_string_map_qmd(const char*& str_input, char sep_char, $/;"	f	class:UserRpmAlgorithmInterface	signature:(const char*& str_input, char sep_char, char second_sep_char, QMD_MAP& map_ids, uint32_t limit)
split_string_map_qmd	user_rpm_algorithm_interface.h	/^		void split_string_map_qmd(const char*& str_input, char sep_char, char second_sep_char,$/;"	p	class:UserRpmAlgorithmInterface	access:private	signature:(const char*& str_input, char sep_char, char second_sep_char, QMD_MAP& map_ids, uint32_t limit = 0)
target_ctr_	ContAdvSim.h	/^   double          target_ctr_;                    \/\/层次平滑ctr$/;"	m	struct:FeedInfo	access:public
uint32	ContAdvSim.h	/^typedef uint32_t uint32;$/;"	t
uint64	ContAdvSim.h	/^typedef uint64_t uint64;$/;"	t
unCateCode	ContAdvSim.h	/^uint32_t  unCateCode ;\/\/匹配分类编码$/;"	m	struct:RETDESWORDSCATE	access:public
unCateCode	ContAdvSim.h	/^uint32_t  unCateCode;\/\/匹配分类编码$/;"	m	struct:RETORIWORDSCATE	access:public
unCateCode	ContAdvSim.h	/^uint32_t unCateCode;   \/\/分类编码$/;"	m	struct:ORIWORdSCATE	access:public
unCateCode	ContAdvSim.h	/^uint32_t unCateCode;   \/\/分类编码$/;"	m	struct:WB	access:public
unSrcCateCode	ContAdvSim.cpp	/^    uint32_t unSrcCateCode;       \/\/ 源微博分类编码 $/;"	m	struct:_vbinfo	file:	access:public
url_md5	ContAdvSim.h	/^    uint32 url_md5;\/\/url的md5编码值$/;"	m	struct:FeedInfo	access:public
vtrCateCode	ContAdvSim.h	/^vector<pair<uint32_t,pair< float,float > > >  vtrCateCode;   \/\/分类编码, 一级分类分值, 二级分类分值$/;"	m	struct:DESWORDSCATE	access:public
vtrKeywords	ContAdvSim.h	/^vector<pair<string,pair<uint32_t, uint32_t > > >  vtrKeywords;  \/\/关键词，权重，词性$/;"	m	struct:DESWORDSCATE	access:public
vtrKeywords	ContAdvSim.h	/^vector<pair<string,pair<uint32_t, uint32_t > > >  vtrKeywords;  \/\/关键词，权重，词性$/;"	m	struct:ORIWORdSCATE	access:public
vtrKeywords	ContAdvSim.h	/^vector<pair<string,pair<uint32_t, uint32_t > > >  vtrKeywords;  \/\/关键词，权重，词性$/;"	m	struct:WB	access:public
~GoodsAdAlgorithmInterface	goods_ad_algorithm_interface.h	/^		~GoodsAdAlgorithmInterface(){$/;"	f	class:GoodsAdAlgorithmInterface	access:public	signature:()
~InterAlgorithmInterface	inter_algorithm_interface.h	/^		~InterAlgorithmInterface(){$/;"	f	class:InterAlgorithmInterface	access:public	signature:()
~UserRpmAlgorithmInterface	user_rpm_algorithm_interface.h	/^		~UserRpmAlgorithmInterface(){$/;"	f	class:UserRpmAlgorithmInterface	access:public	signature:()
